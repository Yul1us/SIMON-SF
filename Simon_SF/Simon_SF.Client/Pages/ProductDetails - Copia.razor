@using Microsoft.AspNetCore.Authorization
@* Injectar los componntes *@
@inject IProductCategoryService ProductCategoryService
@inject IProductService ProductService
@inject ICostumerService CostumerService
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@* Este servicio de MudBlazor, muestra un mensaje que indica si la operacion realizada fue exitosa o fallo... 
    Es una notificacion que le aparece al usuario, para que este enterado...
*@
@inject ISnackbar Snackbar

@* Usando MudBlazor *@
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5" Align="Align.Center">Detalles del Producto</MudText>
    </TitleContent>

    <DialogContent>
        <EditForm Model="@Product">
            <MudPaper Class="p-4 mb-4">
                <!-- Subtotal -->
                <MudText Typo="Typo.subtitle1" Align="Align.Right" Class="mt-2">Subtotal: <b>@subtotal:$</b></MudText>
                <MudGrid>

                    <!-- Dropdown Categoría -->
                    <MudItem xs="12" sm="6">
                        <MudSelect Label="Categoría"
                                   Value="@Product.CategoryId"
                                   ValueChanged="@((int productCategoryId) => ProductCategoryHasChanged(productCategoryId))"
                                   Variant="Variant.Outlined" Dense="true">
                            @foreach (var item in productCategories)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Dropdown Producto -->
                    <MudItem xs="12" sm="6">
                        <MudSelect Label="Producto"
                                   Value="@Product.Id"
                                   ValueChanged="@((int productId) => ProductHasChanged(productId))"
                                   Variant="Variant.Outlined" Dense="true">
                            @foreach (var item in products)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <!-- Detalles de Producto -->
            <MudPaper Class="p-4 mb-4">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Precio" Value="@Product.Price" Disabled="true" Variant="Variant.Outlined" Dense="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="Cantidad" @bind-Value="@Product.Quantity" Variant="Variant.Outlined" Dense="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Unidad" Value="@Product.TxtUnidadMedida" Disabled="true" Variant="Variant.Outlined" Dense="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Multiplicador" Value="@Multiplicador" Disabled="true" Variant="Variant.Outlined" Dense="true" />
                    </MudItem>
                </MudGrid>
            </MudPaper>

          
        </EditForm>
    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddProduct">Añadir</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .mud-dialog {
        max-width: 600px;
        border-radius: 12px;
        padding: 16px;
    }

    .mud-paper {
        border-radius: 8px;
    }
</style>


@code {

    //Traernos los DropDown


    //Bindear un Objeto..
    public Product Product = new Product();
    // MulticastNotSupportedException si ocurre algún error
    public string Message { get; set; }
    public float? unidadxCantidad { get; set; }

    //Aca se incorporan las Listas
    public IEnumerable<ProductCategory> productCategories = new List<ProductCategory>();
    //Colecion de Categorias -> Product
    public IEnumerable<Product> products = new List<Product>();
    public Costumer Cliente = new Costumer();
    [Parameter]
    public int? Server { get; set; } 
    //Para resibir los parametros
    //Se envian losparametros desde el componante -> var dialog = DialogService.Show<ProductDetails>("ProductDetails");
    //de OrderDetails
    [CascadingParameter]
    //Una propiedad
    MudDialogInstance MudDialog { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //Carga las Categoria cuando se carga la Pagina, e inicializa todo...
            productCategories = await ProductCategoryService.GetProductCategories();
            Cliente = await CostumerService.GetDetails(Server);

            //Con esta Categoria por defecto, se deben cargar los productos pertenecientes a ella
            //Para que el segundo DropDown no este vacio al cargar por primera ves
            //productCategories.Any() -> si tiene algo y no es nulo
            if (productCategories != null && productCategories.Any())
            {
                //Le cargamos al CategoriId un valor y esta bindeando directamente
                // Es el Id del primer elemento del DropDown de Caterorias.
                Product.CategoryId = productCategories.FirstOrDefault().Id;
                //Carga todos los productos de la categoria...
                await LoadProducts(Product.CategoryId);
            }

        }
        catch (Exception e)
        {

            Message = "Error..." + e.Message;
        }

    }

    public float? Multiplicador
    {
        get
        {
            if (Product.FacturaPor == 0)
            {
                return Product.Quantity;
            }
            else
            {
                return Product.promedio_peso * Product.Quantity;
        // Asegúrate de convertir `Product.Price` a `float` si es `decimal`
            }
        }
    }

    public decimal? subtotal => Product.Price * (decimal?)Multiplicador;

    //Para implementar los Dropdown, y capturar el Category Id, Cuando se dispara el Evento ValueChanged
    protected async Task ProductCategoryHasChanged(int productCategoryId)
    {
        //Aca la Idea es cargar los Productos... luego que se dispara el evento Changed ProductCategoryId...
        // ValueExpression="@(() => Order.ProductCategoryId)" Es el Valor que se pasa.... a esta metodo...
        Product.CategoryId = productCategoryId;

        //Validamos que tenga algo...
        if (Product.CategoryId > 0)
        {
            //Trae los Productos de la Categoria
            await LoadProducts(Product.CategoryId);

        }
    }



    //Para implementar los Dropdown, y capturar el Id, Cuando se dispara el Evento ValueChanged
    protected async Task ProductHasChanged(int productId)
    {
        //Aca la Idea es cargar los Productos... luego que se dispara el evento Changed ProductCategoryId...
        // ValueExpression="@(() => Product.Id)" Es el Valor que se pasa.... a esta metodo...
        Product.Id = productId;

        //Validamos que tenga algo...
        if (Product.Id > 0)
        {
            //Trae Todos los Detalles del Producto
            await LoadProductDetails(Product.Id);

        }
    }

    //Finalmente el que carga El Listado de los Productos en un metodo privado...
    private async Task LoadProducts(int productCategoryId)
    {
        //Llama al Servicio... para cargar los Productos
        products = await ProductService.GetByCategory(productCategoryId);
        Console.WriteLine("productCategoryId" + productCategoryId);

        //Para que se cargen los detalles del primer producto seleccionado
        // Si en products hay algo -> products.Any()
        if (products!=null && products.Any())
        {
            // Es el Id del primer elemento del DropDown de Caterorias.
            Product.Id = products.FirstOrDefault().Id;
            //Trae Todos los Detalles del Producto
            await LoadProductDetails(Product.Id);
        }
    }

    //Finalmente el que carga un Producto en un metodo privado...
    private async Task LoadProductDetails(int productId)
    {
        //Llama al Servicio... para cargar los Detalles del Producto
        Product = await ProductService.GetDetails(productId,Cliente.Tipo_Precio,Cliente.Num_Tipo_Cliente);
        unidadxCantidad = Product.promedio_peso * Product.Quantity;
        Console.WriteLine("productId" + productId);
    }

    private void Cancel()
    {
        //Aca se usa la notificacion de MudBlazor llamada -> SnackBar
        Snackbar.Add("Product Cancel...", Severity.Warning , a => a.VisibleStateDuration = 200);
        //No Envia los Parametros
        MudDialog.Cancel();
    }

    private void AddProduct()
    {
        //Aca se usa la notificacion de MudBlazor llamada -> SnackBar
        Snackbar.Add("Product added...", Severity.Success, a=>a.VisibleStateDuration=200);
        //Envia los Parametros
        MudDialog.Close(DialogResult.Ok(Product));

    }


    // private void RevomeProduct()
    // {
    //     //Aca se usa la notificacion de MudBlazor llamada -> SnackBar
    //     Snackbar.Add("Product removed...", Severity.Error, a => a.VisibleStateDuration = 200);
    //     //Envia los Parametros
    //     MudDialog.Close(DialogResult.Ok(Product));

    // }
}
