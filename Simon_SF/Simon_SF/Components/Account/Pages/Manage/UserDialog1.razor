@* Injectar los componntes *@
@inject IUserService UserService
@using System.Linq;
@using Blazor.SIMONStore.Client.Models
@* Este servicio de MudBlazor, muestra un mensaje que indica si la operacion realizada fue exitosa o fallo... 
    Es una notificacion que le aparece al usuario, para que este enterado...
*@
@inject ISnackbar Snackbar
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@* Usando MudBlazor *@
<MudDialog>
    <TitleContent>
        Client Details
    </TitleContent>

    <DialogContent>
        @* Aca es donde se Bindea el Objeto... *@
        <EditForm Model="@Users">
         <div class="card">
        <div class="card-body">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 mb-3">
                        <label for="searchClient">Buscar Cliente</label>
                                
                               <InputText class="form-control" placeholder="Buscar...." @bind-Value="Search"></InputText>
                    </div>
                </div>
                </div>

                    <div class="row">
                    <div class="col-md-12 mb-3">
                        <label >Clientes</label>
                            <div class="client-list" style="height: 300px; overflow-y: auto;">
                                @foreach (var _user in FilteredClients)
                                {


                                    if (user.Email == _user.Email)
                                    {
                                        <div class="client-item" style="background-color:dodgerblue" @onclick="() => SelectClient(_user)">@_user.Email </div>
                                    }
                                    else
                                    {
                                        <div class="client-item" @onclick="() => SelectClient(_user)">@_user.Email</div>
                                    }
                                    
                                }
                            </div>
                    </div>
                </div>
            </div>
        </div>
      
    </EditForm>
 
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddCliente" >Add</MudButton>
      
    </DialogActions>

</MudDialog>

@code {
    //Traernos los DropDown


    //Bindear un Objeto..
    public User user = new User();
    // MulticastNotSupportedException si ocurre algún error
    public string Message { get; set; }
    public string Search { get; set; }
    IEnumerable<User> FilteredClients => string.IsNullOrEmpty(Search) ? Users : Users.Where(c => c.Email.Contains(Search, StringComparison.OrdinalIgnoreCase));
    //Aca se incorporan las Listas
    public IEnumerable<User> Users = new List<User>();
    //Colecion de Categorias -> Product


    //Para resibir los parametros
    //Se envian losparametros desde el componante -> var dialog = DialogService.Show<ProductDetails>("ProductDetails");
    //de OrderDetails
    [CascadingParameter]
    //Una propiedad
    MudDialogInstance MudDialog { get; set; }


    protected override async Task OnInitializedAsync()
    {
   
        try
        {
            //Carga las Categoria cuando se carga la Pagina, e inicializa todo...
            Users = await UserService.GetAll();
            //Con esta Categoria por defecto, se deben cargar los productos pertenecientes a ella
            //Para que el segundo DropDown no este vacio al cargar por primera ves
            //productCategories.Any() -> si tiene algo y no es nulo
        


        }
        catch (Exception e)
        {

            Message = "Error..." + e.Message;
        }

    }




            //Para implementar los Dropdown, y capturar el Category Id, Cuando se dispara el Evento ValueChanged
    /* protected async Task ProductCategoryHasChanged(int ClienteID)
    {
    //Aca la Idea es cargar los Productos... luego que se dispara el evento Changed ProductCategoryId...
    // ValueExpression="@(() => Order.ProductCategoryId)" Es el Valor que se pasa.... a esta metodo...
          Cliente.Id = ClienteID;


          }



          //Para implementar los Dropdown, y capturar el Id, Cuando se dispara el Evento ValueChanged
          protected async Task ProductHasChanged(int productId)
          {
          //Aca la Idea es cargar los Productos... luego que se dispara el evento Changed ProductCategoryId...
          // ValueExpression="@(() => Product.Id)" Es el Valor que se pasa.... a esta metodo...
      Cliente.Id = productId;

     //Validamos que tenga algo...
    if (Cliente.Id > 0)
    {
    //Trae Todos los Detalles del Producto

    }
          }
          */


          //Finalmente el que carga un Producto en un metodo privado...
    /* private async Task LoadProductDetails(int ClientID)
    {
    //Llama al Servicio... para cargar los Detalles del Producto
    Cliente = ClienteDetails(ClientID);
          Console.WriteLine("ClienteID" + ClientID);
    }


    private void AddProduct()
    {
    //Aca se usa la notificacion de MudBlazor llamada -> SnackBar
    Snackbar.Add("Product added...", Severity.Success, a=>a.VisibleStateDuration=200);
      //Envia los Parametros
      MudDialog.Close(DialogResult.Ok(Cliente));

    }
    public Client ClienteDetails(int id)
        {

        foreach (var item in Clientes)
            {
            if (item.Id == id)
    {
    var cliente = item;
      return cliente;
     }
     }

    return null;

    }
    */
    // private void RevomeProduct()
    // {
    //     //Aca se usa la notificacion de MudBlazor llamada -> SnackBar
    //     Snackbar.Add("Product removed...", Severity.Error, a => a.VisibleStateDuration = 200);
    //     //Envia los Parametros
    //     MudDialog.Close(DialogResult.Ok(Product));

    // }

    private void AddCliente()
    {
        //Aca se usa la notificacion de MudBlazor llamada -> SnackBar
        Snackbar.Add("Cliente added...", Severity.Success, a => a.VisibleStateDuration = 200);
        //Envia los Parametros
        MudDialog.Close(DialogResult.Ok(user));

    }
    private void Cancel()
    {
        //Aca se usa la notificacion de MudBlazor llamada -> SnackBar
        Snackbar.Add("Product Cancel...", Severity.Warning, a => a.VisibleStateDuration = 200);
        //No Envia los Parametros
        MudDialog.Cancel();
    }
    private User SelectedClient;

    private void SelectClient(User client)
    {
        SelectedClient = client;
       
        user = SelectedClient;
        // Do something with the selected client, e.g., display details, update a form, etc.
    }
   

  

}
@* Updated script for clarity and potential error handling *@
