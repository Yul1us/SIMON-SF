@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using MailKit.Net.Smtp
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@using MimeKit
@using Simon_SF.Data
@using Simon_SF.Utilidades
@using global::Shared
@inject IOptions<GlobalSettings> GlobalSettings
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RolManager

<PageTitle>Registro</PageTitle>
<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-5">
            <section class="card shadow-lg">
                <div class="card-header text-center text-black">
                    <h3>Crear una nueva cuenta</h3>
                </div>
                <div class="card-body">
                    <StatusMessage Message="@Message" />
                    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator />
                  
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email" class="form-label">Email</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                            <label for="password" class="form-label">Contraseña</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="confirmar password" />
                            <label for="confirm-password" class="form-label">Confirmar contraseña</label>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>
                        <div class="d-grid gap-2 mb-3">
                            <button type="submit" class="btn btn-primary btn-lg">Registrar</button>
                        </div>
                    </EditForm>
                </div>
            </section>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        if (!await RolManager.RoleExistsAsync(Roles.Rol_Coordinador))
        {
            await RolManager.CreateAsync(new IdentityRole(Roles.Rol_Coordinador));
            await RolManager.CreateAsync(new IdentityRole(Roles.Rol_Vendedor));
            await RolManager.CreateAsync(new IdentityRole(Roles.Rol_Cliente));
            await RolManager.CreateAsync(new IdentityRole(Roles.Rol_Administrador));
        }

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors.Select(error => new IdentityError
                {
                    Code = error.Code,
                    Description = TranslateIdentityError(error)
                });
            return;
        }

        Logger.LogInformation("User created a new account with password.");
        await UserManager.AddToRoleAsync(user, Roles.Rol_Cliente);

        var userId = await UserManager.GetUserIdAsync(user);
        if (string.IsNullOrEmpty(userId))
        {
            identityErrors = new List<IdentityError> { new IdentityError { Description = "Error al obtener el ID del usuario." } };
            return;
        }

        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = $"{NavigationManager.BaseUri}Account/ConfirmEmail?userId={userId}&code={code}&returnUrl={ReturnUrl}";
        var htmlMessage = $@"
            <!DOCTYPE html>
            <html lang=""es"">
            <head>
                <meta charset=""UTF-8"">
                <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
                <title>Confirmación de Cuenta</title>
                <style>
                    body {{
                        font-family: 'Roboto', Arial, sans-serif;
                        background-color: #f4f7fc;
                        color: #4a4a4a;
                        margin: 0;
                        padding: 0;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        min-height: 100vh;
                    }}
                    .container {{
                        max-width: 600px;
                        background-color: #ffffff;
                        border-radius: 12px;
                        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
                        overflow: hidden;
                        margin: 20px;
                    }}
                    .header {{
                        background-color: #007BFF;
                        color: #ffffff;
                        text-align: center;
                        padding: 25px;
                    }}
                    .header h1 {{
                        margin: 0;
                        font-size: 26px;
                        font-weight: bold;
                    }}
                    .content {{
                        padding: 20px;
                        line-height: 1.8;
                        font-size: 16px;
                        color: #333333;
                    }}
                    .content p {{
                        margin: 0 0 20px;
                    }}
                    .button-container {{
                        text-align: center;
                        margin-top: 20px;
                    }}
                    .button {{
                        background-color: #007BFF;
                        color: #ffffff;
                        padding: 12px 24px;
                        text-decoration: none;
                        border-radius: 5px;
                        font-size: 16px;
                        font-weight: bold;
                        transition: background-color 0.3s ease;
                        display: inline-block;
                    }}
                    .button:hover {{
                        background-color: #0056b3;
                    }}
                    .footer {{
                        text-align: center;
                        font-size: 14px;
                        color: #666666;
                        padding: 15px 20px;
                        border-top: 1px solid #dddddd;
                    }}
                    .footer a {{
                        color: #007BFF;
                        text-decoration: none;
                    }}
                    .footer a:hover {{
                        text-decoration: underline;
                    }}
                </style>
            </head>
            <body>
                <div class=""container"">
                    <div class=""header"">
                        <h1>Confirmación de Cuenta</h1>
                    </div>
                    <div class=""content"">
                        <p>Hola,</p>

                        <p>Gracias por registrarte en <strong>Simon_SF</strong>. Por favor, confirma tu cuenta haciendo clic en el botón de abajo:</p>
                        <div class=""button-container"">
                            <a href=""{HtmlEncoder.Default.Encode(callbackUrl)}"" class=""button"">Confirmar Cuenta</a>
                        </div>
                        <p>Si no solicitaste esta confirmación, puedes ignorar este correo.</p>
                        <p>¡Gracias por unirte a nuestra comunidad!</p>
                    </div>
                    <div class=""footer"">
                        &copy; 2025 Simon_SF. Todos los derechos reservados. <br>
                        <a href="""">Términos y condiciones</a> |
                        <a href="""">Política de privacidad</a>
                    </div>
                </div>
            </body>
            </html>";

        SendMail(htmlMessage);
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser() => new ApplicationUser();

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("El UserStore no admite correos electrónicos.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    void SendMail(string body)
    {
        var email = new MimeMessage();
        email.From.Add(MailboxAddress.Parse(GlobalSettings.Value.Email));
        email.To.Add(MailboxAddress.Parse(Input.Email));
        email.Subject = "Confirmación de cuenta";
        email.Body = new TextPart(MimeKit.Text.TextFormat.Html) { Text = body };

        using var smtp = new SmtpClient();
        smtp.Connect(GlobalSettings.Value.ApiBaseUrl, 465, MailKit.Security.SecureSocketOptions.SslOnConnect);
        smtp.Authenticate(GlobalSettings.Value.Email, GlobalSettings.Value.Password);
        smtp.Send(email);
        smtp.Disconnect(true);
    }

    private string TranslateIdentityError(IdentityError error)
    {
        switch (error.Code)
        {
            case "DuplicateUserName":
                return "El nombre de usuario ya está en uso.";
            case "DuplicateEmail":
                return "El correo electrónico ya está en uso.";
            case "InvalidEmail":
                return "El correo electrónico no es válido.";
            case "InvalidUserName":
                return "El nombre de usuario no es válido.";
            case "PasswordTooShort":
                return "La contraseña es demasiado corta.";
            case "PasswordRequiresNonAlphanumeric":
                return "La contraseña debe contener al menos un carácter no alfanumérico.";
            case "PasswordRequiresDigit":
                return "La contraseña debe contener al menos un dígito.";
            case "PasswordRequiresLower":
                return "La contraseña debe contener al menos una letra minúscula.";
            case "PasswordRequiresUpper":
                return "La contraseña debe contener al menos una letra mayúscula.";
            default:
                return error.Description;
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El correo electrónico es requerido.")]
        [EmailAddress(ErrorMessage = "El correo electrónico no es válido.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida.")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "La contraseña y la confirmación de la contraseña no coinciden.")]
        public string ConfirmPassword { get; set; } = "";
    }
}